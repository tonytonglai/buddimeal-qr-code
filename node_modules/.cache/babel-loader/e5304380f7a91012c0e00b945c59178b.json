{"ast":null,"code":"var _jsxFileName = \"/Users/tonylai/buddiemeal-web-qr/src/components/QRScanner.js\";\nimport React, { useState } from 'react';\nimport QRReader from 'react-qr-reader';\nimport Modal from './Modal'; //string \"buddiemeal\" is chosen as placeholder text. can swap this to whatever\n\nconst QRScanner = ({\n  examineData\n}) => {\n  const [result, setResult] = useState('');\n  const [scanBool, setScanBool] = useState(true);\n  const [modalVisible, setModalVisible] = useState(false);\n\n  const ToggleTrue = () => {\n    //disabled timeout so that users HAVE to click on the modal to get rid of it. \n    //Looking into whether or not I want to change this.\n    // setTimeout(() => {\n    //     setModalVisible(false);\n    //     setScanBool(true);\n    // }, 5000);\n    setModalVisible(!scanBool);\n  };\n\n  const handleScan = data => {\n    if (data) {\n      setResult(data);\n      checkData(result);\n    } // console.log(\"scanning\");  \n\n  };\n\n  const checkData = data => {\n    //*CHANGE TO DATA YOU WANT*\n    // MAKE AN API CALL HERE\n    const checker = examineData(data);\n    console.log(typeof checker);\n\n    if (checker) {\n      ToggleTrue();\n      setScanBool(false);\n    } else {\n      console.log(\"hmmm\");\n      setModalVisible(false);\n    }\n  };\n\n  const handleError = err => {\n    console.log(err);\n  }; //define a function that will be passed as a prop into Modal\n  //this function will disable the delay scan until the user taps the modal\n  //then, it will re-enable the scan by removing delay as a value.\n\n\n  const whatToRender = () => {\n    if (scanBool) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(QRReader, {\n        delay: scanBool ? 500 : false,\n        onError: err => handleError(err),\n        onScan: data => handleScan(data),\n        style: {\n          marginLeft: 'auto',\n          marginRight: 'auto',\n          width: '100%',\n          maxWidth: '600px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          backgroundColor: 'lightgray',\n          width: '100%',\n          height: 'calc(100vw)',\n          maxHeight: '600px',\n          maxWidth: '600px',\n          justifyContent: 'center',\n          margin: 'auto',\n          // borderRadius:'100%',\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }\n      }));\n    }\n  }; // const isScan = (scanBool) => {\n  //     return scanBool? 500 : false;\n  // }\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      backgroundColor: 'lightgray',\n      padding: '40px 0px',\n      boxShadow: \"inset 0px 1px 10px 5px grey\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, whatToRender()), /*#__PURE__*/React.createElement(Modal, {\n    modalVisible: modalVisible,\n    scanBool: scanBool,\n    setScanBool: setScanBool,\n    setModalVisible: setModalVisible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default QRScanner;","map":{"version":3,"sources":["/Users/tonylai/buddiemeal-web-qr/src/components/QRScanner.js"],"names":["React","useState","QRReader","Modal","QRScanner","examineData","result","setResult","scanBool","setScanBool","modalVisible","setModalVisible","ToggleTrue","handleScan","data","checkData","checker","console","log","handleError","err","whatToRender","marginLeft","marginRight","width","maxWidth","backgroundColor","height","maxHeight","justifyContent","margin","textAlign","padding","boxShadow"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport QRReader from 'react-qr-reader';\nimport Modal from './Modal';\n\n//string \"buddiemeal\" is chosen as placeholder text. can swap this to whatever\nconst QRScanner = ({examineData}) => {\n\n    const [result, setResult] = useState('');\n    const [scanBool, setScanBool] = useState(true);\n    const [modalVisible, setModalVisible] = useState(false);\n\n    const ToggleTrue = () => {\n        //disabled timeout so that users HAVE to click on the modal to get rid of it. \n        //Looking into whether or not I want to change this.\n\n        // setTimeout(() => {\n        //     setModalVisible(false);\n        //     setScanBool(true);\n        // }, 5000);\n\n        setModalVisible(!scanBool);\n    }\n\n    const handleScan = data => {\n        if (data) {\n            setResult(data);\n            checkData(result);\n        }\n        // console.log(\"scanning\");  \n    }\n\n    const checkData = (data) => {\n        //*CHANGE TO DATA YOU WANT*\n        // MAKE AN API CALL HERE\n        const checker = examineData(data);\n        console.log(typeof(checker))\n        if (checker) {\n            ToggleTrue();\n            setScanBool(false);\n        } else {\n            console.log(\"hmmm\");\n            setModalVisible(false);\n        }\n    }\n\n    const handleError = err => {\n        console.log(err);\n    }\n\n    //define a function that will be passed as a prop into Modal\n    //this function will disable the delay scan until the user taps the modal\n    //then, it will re-enable the scan by removing delay as a value.\n\n    const whatToRender = () => {\n        if (scanBool) {\n            return (\n                <div>\n                    <QRReader \n                    delay={(scanBool? 500: false)}\n                    onError={(err) => handleError(err)}\n                    onScan={(data) => handleScan(data)}\n                    style={{\n                        marginLeft: 'auto',\n                        marginRight: 'auto',\n                        width: '100%',\n                        maxWidth: '600px'\n                    }}\n                    /> \n                </div>\n            );\n        } else {\n            return (\n            <div>\n                <div\n                    style={\n                        {\n                            backgroundColor:'lightgray',\n                            width: '100%',\n                            height: 'calc(100vw)',\n                            maxHeight: '600px',\n                            maxWidth: '600px',\n                            justifyContent:'center',\n                            margin:'auto',\n                            // borderRadius:'100%',\n                            textAlign: \"center\"\n                        }\n                    }\n                    >\n                </div>\n            </div>\n            )\n        }\n    }\n    // const isScan = (scanBool) => {\n    //     return scanBool? 500 : false;\n    // }\n    return (\n        <div>\n            <div style={{backgroundColor: 'lightgray', padding: '40px 0px', boxShadow: \"inset 0px 1px 10px 5px grey\"}}>\n                {whatToRender()}\n            </div>\n            <Modal modalVisible={modalVisible} scanBool={scanBool} setScanBool={setScanBool} setModalVisible={setModalVisible}/>\n        </div>\n    ) \n}\n\nexport default QRScanner;"]},"metadata":{},"sourceType":"module"}