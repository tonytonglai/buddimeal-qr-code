{"ast":null,"code":"import _slicedToArray from\"/Users/tonylai/Desktop/bmwqr/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import QRReader from'react-qr-reader';import Modal from'./Modal';//string \"buddiemeal\" is chosen as placeholder text. can swap this to whatever\nvar QRScanner=function QRScanner(_ref){var examineData=_ref.examineData,modalActivate=_ref.modalActivate,setModalActivate=_ref.setModalActivate,updateOrder=_ref.updateOrder;var _useState=useState(''),_useState2=_slicedToArray(_useState,2),result=_useState2[0],setResult=_useState2[1];var _useState3=useState(true),_useState4=_slicedToArray(_useState3,2),scanBool=_useState4[0],setScanBool=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),modalVisible=_useState6[0],setModalVisible=_useState6[1];var ToggleTrue=function ToggleTrue(){//disabled timeout so that users HAVE to click on the modal to get rid of it. \n//Looking into whether or not I want to change this.\n// setTimeout(() => {\n//     setModalVisible(false);\n//     setScanBool(true);\n// }, 5000);\nsetModalVisible(true);setScanBool(false);setModalActivate(false);};var handleScan=function handleScan(data){if(data){setResult(data);checkData(result);}// console.log(\"scanning\");  \n};var checkData=function checkData(data){//*CHANGE TO DATA YOU WANT*\n// MAKE AN API CALL HERE\nexamineData(data);if(modalActivate){updateOrder(data);ToggleTrue();setScanBool(false);}else{setModalVisible(false);}};var handleError=function handleError(err){console.log(err);};//define a function that will be passed as a prop into Modal\n//this function will disable the delay scan until the user taps the modal\n//then, it will re-enable the scan by removing delay as a value.\nvar whatToRender=function whatToRender(){if(scanBool){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(QRReader,{delay:scanBool?500:false,onError:function onError(err){return handleError(err);},onScan:function onScan(data){return handleScan(data);},style:{marginLeft:'auto',marginRight:'auto',width:'100%',maxWidth:'600px'}}));}else{return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{style:{backgroundColor:'lightgray',width:'100%',height:'calc(100vw)',maxHeight:'600px',maxWidth:'600px',justifyContent:'center',margin:'auto',// borderRadius:'100%',\ntextAlign:\"center\"}}));}};// const isScan = (scanBool) => {\n//     return scanBool? 500 : false;\n// }\nreturn/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{style:{backgroundColor:'lightgray',padding:'40px 0px',boxShadow:\"inset 0px 1px 10px 5px grey\"}},whatToRender()),/*#__PURE__*/React.createElement(Modal,{modalVisible:modalVisible,scanBool:scanBool,setScanBool:setScanBool,setModalVisible:setModalVisible}));};export default QRScanner;","map":{"version":3,"sources":["/Users/tonylai/Desktop/bmwqr/src/components/QRScanner.js"],"names":["React","useState","QRReader","Modal","QRScanner","examineData","modalActivate","setModalActivate","updateOrder","result","setResult","scanBool","setScanBool","modalVisible","setModalVisible","ToggleTrue","handleScan","data","checkData","handleError","err","console","log","whatToRender","marginLeft","marginRight","width","maxWidth","backgroundColor","height","maxHeight","justifyContent","margin","textAlign","padding","boxShadow"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport QRReader from 'react-qr-reader';\nimport Modal from './Modal';\n\n//string \"buddiemeal\" is chosen as placeholder text. can swap this to whatever\nconst QRScanner = ({examineData, modalActivate, setModalActivate, updateOrder}) => {\n\n    const [result, setResult] = useState('');\n    const [scanBool, setScanBool] = useState(true);\n    const [modalVisible, setModalVisible] = useState(false);\n\n    const ToggleTrue = () => {\n        //disabled timeout so that users HAVE to click on the modal to get rid of it. \n        //Looking into whether or not I want to change this.\n\n        // setTimeout(() => {\n        //     setModalVisible(false);\n        //     setScanBool(true);\n        // }, 5000);\n        setModalVisible(true);\n        setScanBool(false);\n        setModalActivate(false);\n    }\n\n    const handleScan = data => {\n        if (data) {\n            setResult(data);\n            checkData(result);\n        }\n        // console.log(\"scanning\");  \n    }\n\n    const checkData = (data) => {\n        //*CHANGE TO DATA YOU WANT*\n        // MAKE AN API CALL HERE\n        examineData(data);\n        if (modalActivate) {\n            updateOrder(data);\n            ToggleTrue();\n            setScanBool(false);\n            \n        } else {\n            setModalVisible(false);\n        }\n    }\n\n    const handleError = err => {\n        console.log(err);\n    }\n\n    //define a function that will be passed as a prop into Modal\n    //this function will disable the delay scan until the user taps the modal\n    //then, it will re-enable the scan by removing delay as a value.\n\n    const whatToRender = () => {\n        if (scanBool) {\n            return (\n                <div>\n                    <QRReader \n                    delay={(scanBool? 500: false)}\n                    onError={(err) => handleError(err)}\n                    onScan={(data) => handleScan(data)}\n                    style={{\n                        marginLeft: 'auto',\n                        marginRight: 'auto',\n                        width: '100%',\n                        maxWidth: '600px'\n                    }}\n                    /> \n                </div>\n            );\n        } else {\n            return (\n            <div>\n                <div\n                    style={\n                        {\n                            backgroundColor:'lightgray',\n                            width: '100%',\n                            height: 'calc(100vw)',\n                            maxHeight: '600px',\n                            maxWidth: '600px',\n                            justifyContent:'center',\n                            margin:'auto',\n                            // borderRadius:'100%',\n                            textAlign: \"center\"\n                        }\n                    }\n                    >\n                </div>\n            </div>\n            )\n        }\n    }\n    // const isScan = (scanBool) => {\n    //     return scanBool? 500 : false;\n    // }\n    return (\n        <div>\n            <div style={{backgroundColor: 'lightgray', padding: '40px 0px', boxShadow: \"inset 0px 1px 10px 5px grey\"}}>\n                {whatToRender()}\n            </div>\n            <Modal modalVisible={modalVisible} scanBool={scanBool} setScanBool={setScanBool} setModalVisible={setModalVisible}/>\n        </div>\n    ) \n}\n\nexport default QRScanner;"]},"metadata":{},"sourceType":"module"}